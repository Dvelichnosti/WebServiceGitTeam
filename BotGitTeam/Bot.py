import logging
import telegram
import asyncio
from telegram import Message, Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
) #–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "7682952936:AAGjkGlBk45iskGZouGk_ofW53e4DNrRsO0" #—Ç–≥ –∞–π–¥–∏ –±–æ—Ç–∞
ADMIN_ID = 5642938812 #—Ç–≥ –∞–π–¥–∏ –∞–¥–º–∏–Ω–∞

messages_queue = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [KeyboardButton("‚ùóÔ∏è–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
         KeyboardButton("üí¨–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=reply_markup)

async def show_questions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [KeyboardButton("‚úÖ–í–æ–ø—Ä–æ—Å 1"), KeyboardButton("‚úÖ–í–æ–ø—Ä–æ—Å 2")],
        [KeyboardButton("üîô–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await context.bot.send_message(chat_id=update.message.from_user.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        if update.message.text == "‚ùóÔ∏è–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
            await show_questions(update, context)
        elif update.message.text == "üí¨–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π":
            await context.bot.send_message(chat_id=user_id, text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n‚ùó—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–ø–∏—à–µ—Ç —Ç—É–¥–∞\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô–ù–∞–∑–∞–¥")]], resize_keyboard=True, one_time_keyboard=True))
        elif update.message.text == "‚úÖ–í–æ–ø—Ä–æ—Å 1":
            await context.bot.send_message(chat_id=user_id, text="–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1: –ö—Ç–æ –∂–µ –º—ã —Ç–∞–∫–∏–µüßê?\n–º—ã –∫–æ–º–∞–Ω–¥–∞ GitTeam, 4 –ø–æ–¥—Ä–æ—Å—Ç–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–≤–ª–µ–∫–∞—é—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.üòä\n–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç \n\n–ù–∞–∂–º–∏—Ç–µ 'üîô–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô–ù–∞–∑–∞–¥")]], resize_keyboard=True, one_time_keyboard=True))
        elif update.message.text == "‚úÖ–í–æ–ø—Ä–æ—Å 2":
            await context.bot.send_message(chat_id=user_id, text="–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 2: –î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω —ç—Ç–æ—Ç –±–æ—Çüßê?\n–≠—Ç–æ—Ç –±–æ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏,\n–í –Ω–µ–º –≤—ã –º–æ–∂–µ—Ç–µ:\n–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω—É–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n–ù–∞–∂–º–∏—Ç–µ 'üîô–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô–ù–∞–∑–∞–¥")]], resize_keyboard=True, one_time_keyboard=True))
        elif update.message.text == "üîô–ù–∞–∑–∞–¥":
            await start(update, context) 
        else:
            await context.bot.send_message(chat_id=user_id, text="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            messages_queue[user_id] = update.message.text
            await context.bot.send_message(chat_id=ADMIN_ID, text=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{update.message.from_user.username}: {update.message.text}")
    else:
        await handle_admin_reply(update.message)

async def handle_admin_reply(message: Message) -> None:
    if message.reply_to_message and message.reply_to_message.from_user.id in messages_queue:
        user_id = message.reply_to_message.from_user.id
        await message.bot.send_message(chat_id=user_id, text=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.text}")
        del messages_queue[user_id]

def main() -> None:
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.run_polling()

if __name__ == "__main__":
    main()

async def send_test_message():
       bot = telegram.Bot(token=TOKEN)
       try:
           await bot.send_message(chat_id=ADMIN_ID, text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
           print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
       except telegram.error.BadRequest as e:
           print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
       asyncio.run(send_test_message())
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
       user_id = update.message.from_user.id
       if user_id != ADMIN_ID:
           messages_queue[user_id] = update.message.text
           try:
               await context.bot.send_message(chat_id=ADMIN_ID, text=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{update.message.from_user.username}: {update.message.text}")
               await update.message.reply_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
           except telegram.error.BadRequest as e:
               logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
       else:
           await handle_admin_reply(update.message)
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    admin_id = 5642938812
    try:
        await context.bot.send_message(chat_id=admin_id, text="–°–æ–æ–±—â–µ–Ω–∏–µ!")
    except telegram.error.BadRequest as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
if __name__ == "__main__":
       asyncio.run(send_test_message())
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
       user_id = update.message.from_user.id
       if user_id == ADMIN_ID:
           messages_queue[user_id] = update.message.text
           try:
               await context.bot.send_message(chat_id=ADMIN_ID, text=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{update.message.from_user.username}: {update.message.text}")
               await update.message.reply_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
           except telegram.error.BadRequest as e:
               logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
       else:
           await handle_admin_reply(update.message)
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text="–°–æ–æ–±—â–µ–Ω–∏–µ!")
    except telegram.error.BadRequest as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


   
